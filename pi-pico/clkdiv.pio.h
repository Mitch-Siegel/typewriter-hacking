// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// edgedetector //
// ------------ //

#define edgedetector_wrap_target 0
#define edgedetector_wrap 7

static const uint16_t edgedetector_program_instructions[] = {
            //     .wrap_target
    0x4001, //  0: in     pins, 1                    
    0xa0e6, //  1: mov    osr, isr                   
    0x6021, //  2: out    x, 1                       
    0x6041, //  3: out    y, 1                       
    0x00a6, //  4: jmp    x != y, 6                  
    0x0000, //  5: jmp    0                          
    0xc000, //  6: irq    nowait 0                   
    0x0000, //  7: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program edgedetector_program = {
    .instructions = edgedetector_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config edgedetector_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + edgedetector_wrap_target, offset + edgedetector_wrap);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void edgedetector_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = edgedetector_program_get_default_config(offset);
    // Allow PIO to control GPIO pin
    pio_gpio_init(pio, pin);
    // Connect pin to IN pin (control with 'in' instruction)
    sm_config_set_in_pins(&c, pin);
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, true, false, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif

// ---------- //
// clkdivider //
// ---------- //

#define clkdivider_wrap_target 0
#define clkdivider_wrap 4

static const uint16_t clkdivider_program_instructions[] = {
            //     .wrap_target
    0xe04a, //  0: set    y, 10                      
    0x20c0, //  1: wait   1 irq, 0                   
    0x0081, //  2: jmp    y--, 1                     
    0xc001, //  3: irq    nowait 1                   
    0x0000, //  4: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program clkdivider_program = {
    .instructions = clkdivider_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config clkdivider_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + clkdivider_wrap_target, offset + clkdivider_wrap);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void clkdivider_program_init(PIO pio, uint sm, uint offset, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = clkdivider_program_get_default_config(offset);
    sm_config_set_in_shift(&c, false, false, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif

