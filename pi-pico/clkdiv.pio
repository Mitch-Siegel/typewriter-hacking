.program edgedetector

; Turn on LED for 100 cycles and off for 100 cycles.
; At 2 kHz, this will toggle pin at 10 Hz (200 cycles / 2000 Hz = 0.1 sec)

; Thread/Statemachine 1 (clock edge detector):
.wrap_target
readClock:
    in PINS, 1 ; shift in 1 bit (current state of the input pin)
    mov OSR, ISR ; OSR <- ISR
    out X, 1
    out Y, 1
    jmp X!=Y setFlag ; if we don't see an edge, don't set the flag
    jmp readClock
    setFlag:    
    irq set 0
    jmp readClock
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void edgedetector_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = edgedetector_program_get_default_config(offset);

    // Allow PIO to control GPIO pin
    pio_gpio_init(pio, pin);

    // Connect pin to IN pin (control with 'in' instruction)
    sm_config_set_in_pins(&c, pin);

    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_out_shift(&c, true, false, 32);

    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}


.program clkdivider

; Thread/Statemachine 1 (clock edge detector):
.wrap_target
    divideClock:
    set Y, 0b01010          ; set Y to some 5-bit number (21 for (2MHz * 2 (because set irq0 on each edge)) / 21 = 5.25us plus change for the other asm ops)
    ;mov ISR, NULL           ; zero the ISR
    ;in Y, 1                 ; move a 1 into the ISR
    ;in NULL, 6              ; shift that 1 to the left 6 bits to get 64
    ;mov Y, ISR              ; move the ISR back to Y, this is out counter
    divideLoop:
        wait 1 irq 0        ; using the mode by which the falg is cleared upon wait condition satisfied
        jmp Y-- divideLoop  ; decrement Y and loop again if not zero
    irq set 1                   ; set the IRQ flag for someone else to deal with the fact that one baud's worth of time has passed
    jmp divideClock         ; do it all over again

.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void clkdivider_program_init(PIO pio, uint sm, uint offset, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = clkdivider_program_get_default_config(offset);

    sm_config_set_in_shift(&c, false, false, 32);
    
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}


